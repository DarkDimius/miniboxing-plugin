Specializing class MBList...

  // interface:
  abstract trait MBList[T] extends Object {
    def contains(e: T): Boolean
    def contains_J(val T_TypeTag: Byte,e: Long): Boolean
    def length(): Int
    def length_J(val T_TypeTag: Byte): Int
    def toString2(): String
    def toString2_J(val T_TypeTag: Byte): String
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[T],e: T): Boolean
    final private[this] def containsTail_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[T],e: Long): Boolean
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[T],or: Int): Int
    final private[this] def tailHash_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[T],or: Int): Int
    override def hashCode(): Int
    override def hashCode_J(val T_TypeTag: Byte): Int
    override def toString(): String
    override def toString_J(val T_TypeTag: Byte): String
    val head(): T
    val head_J(val T_TypeTag: Byte): Long
    val tail(): miniboxing.benchmarks.minibox.MBList[T]
    val tail_J(val T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[T]
  }

  // specialized class:
  class MBList_J[Tsp] extends MBList[Tsp] {
    def <init>(val miniboxing$benchmarks$minibox$MBList_J|T_TypeTag: Byte,head: Long,tail: miniboxing.benchmarks.minibox.MBList[Tsp]): miniboxing.benchmarks.minibox.MBList_J[Tsp] // is a specialized implementation of constructor MBList
    def contains(e: Tsp): Boolean                                          // is a forwarder to method contains_J
    def contains_J(val T_TypeTag: Byte,e: Long): Boolean                   // is a specialized implementation of method contains
    def length(): Int                                                      // is a forwarder to method length_J
    def length_J(val T_TypeTag: Byte): Int                                 // is a specialized implementation of method length
    def toString2(): String                                                // is a forwarder to method toString2_J
    def toString2_J(val T_TypeTag: Byte): String                           // is a specialized implementation of method toString2
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[Tsp],e: Tsp): Boolean // is a forwarder to method containsTail_J
    final private[this] def containsTail_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[Tsp],e: Long): Boolean // is a specialized implementation of method containsTail
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[Tsp],or: Int): Int // is a forwarder to method tailHash_J
    final private[this] def tailHash_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[Tsp],or: Int): Int // is a specialized implementation of method tailHash
    override def hashCode(): Int                                           // is a forwarder to method hashCode_J
    override def hashCode_J(val T_TypeTag: Byte): Int                      // is a specialized implementation of method hashCode
    override def toString(): String                                        // is a forwarder to method toString_J
    override def toString_J(val T_TypeTag: Byte): String                   // is a specialized implementation of method toString
    private[this] val head: Long                                           // is a specialized implementation of value head
    private[this] val miniboxing$benchmarks$minibox$MBList_J|T_TypeTag: Byte // no info
    private[this] val tail: miniboxing.benchmarks.minibox.MBList[Tsp]      // is a specialized implementation of value tail
    val head(): Tsp                                                        // is a forwarder to value head_J
    val head_J(val T_TypeTag: Byte): Long                                  // is a setter or getter for value head
    val tail(): miniboxing.benchmarks.minibox.MBList[Tsp]                  // is a forwarder to value tail_J
    val tail_J(val T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[Tsp] // is a setter or getter for value tail
  }

  // specialized class:
  class MBList_L[Tsp] extends MBList[Tsp] {
    def <init>(head: Tsp,tail: miniboxing.benchmarks.minibox.MBList[Tsp]): miniboxing.benchmarks.minibox.MBList_L[Tsp] // is a specialized implementation of constructor MBList
    def contains(e: Tsp): Boolean                                          // is a specialized implementation of method contains
    def contains_J(val T_TypeTag: Byte,e: Long): Boolean                   // is a forwarder to method contains
    def length(): Int                                                      // is a specialized implementation of method length
    def length_J(val T_TypeTag: Byte): Int                                 // is a forwarder to method length
    def toString2(): String                                                // is a specialized implementation of method toString2
    def toString2_J(val T_TypeTag: Byte): String                           // is a forwarder to method toString2
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[Tsp],e: Tsp): Boolean // is a specialized implementation of method containsTail
    final private[this] def containsTail_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[Tsp],e: Long): Boolean // is a forwarder to method containsTail
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[Tsp],or: Int): Int // is a specialized implementation of method tailHash
    final private[this] def tailHash_J(val T_TypeTag: Byte,list: miniboxing.benchmarks.minibox.MBList[Tsp],or: Int): Int // is a forwarder to method tailHash
    override def hashCode(): Int                                           // is a specialized implementation of method hashCode
    override def hashCode_J(val T_TypeTag: Byte): Int                      // is a forwarder to method hashCode
    override def toString(): String                                        // is a specialized implementation of method toString
    override def toString_J(val T_TypeTag: Byte): String                   // is a forwarder to method toString
    private[this] val head: Tsp                                            // is a specialized implementation of value head
    private[this] val tail: miniboxing.benchmarks.minibox.MBList[Tsp]      // is a specialized implementation of value tail
    val head(): Tsp                                                        // is a setter or getter for value head
    val head_J(val T_TypeTag: Byte): Long                                  // is a forwarder to value head
    val tail(): miniboxing.benchmarks.minibox.MBList[Tsp]                  // is a setter or getter for value tail
    val tail_J(val T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[Tsp] // is a forwarder to value tail
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.benchmarks.minibox {
  abstract trait MBList[@miniboxed T >: Nothing <: Any] extends Object {
    <stable> <accessor> <paramaccessor> def head(): T;
    <stable> <accessor> <paramaccessor> def tail(): miniboxing.benchmarks.minibox.MBList[T];
    def length(): Int;
    override def toString(): String;
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[T], e: T): Boolean;
    def contains(e: T): Boolean;
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[T], or: Int): Int;
    override def hashCode(): Int;
    def toString2(): String;
    def contains_J(T_TypeTag: Byte, e: Long): Boolean;
    def length_J(T_TypeTag: Byte): Int;
    def toString2_J(T_TypeTag: Byte): String;
    final private[this] def containsTail_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[T], e: Long): Boolean;
    final private[this] def tailHash_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[T], or: Int): Int;
    override def hashCode_J(T_TypeTag: Byte): Int;
    override def toString_J(T_TypeTag: Byte): String;
    <stable> <accessor> <paramaccessor> def head_J(T_TypeTag: Byte): Long;
    <stable> <accessor> <paramaccessor> def tail_J(T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[T]
  };
  class MBList_J[Tsp >: Nothing <: Any] extends Object with miniboxing.benchmarks.minibox.MBList[Tsp] {
    def <init>(miniboxing$benchmarks$minibox$MBList_J|T_TypeTag: Byte, head: Long, tail: miniboxing.benchmarks.minibox.MBList[Tsp]): miniboxing.benchmarks.minibox.MBList_J[Tsp] = {
      MBList_J.super.<init>();
      ()
    };
    def contains(e: Tsp): Boolean = MBList_J.this.contains_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](e, MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag));
    def contains_J(T_TypeTag: Byte, e: Long): Boolean = MBList_J.this.containsTail_J(T_TypeTag, MBList_J.this, e);
    def length(): Int = MBList_J.this.length_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    def length_J(T_TypeTag: Byte): Int = 1.+(if (MBList_J.this.tail_J(T_TypeTag).!=(null))
      MBList_J.this.tail_J(T_TypeTag).length_J(T_TypeTag)
    else
      0);
    def toString2(): String = MBList_J.this.toString2_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    def toString2_J(T_TypeTag: Byte): String = MBList_J.this.toString_J(T_TypeTag);
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[Tsp], e: Tsp): Boolean = MBList_J.this.containsTail_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag, list, MiniboxConversions.this.box2minibox_tt[Tsp](e, MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag));
    final private[this] def containsTail_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[Tsp], e: Long): Boolean = if (MiniboxDispatch.this.mboxed_eqeq_notag(list.head_J(T_TypeTag), e))
      true
    else
      if (list.tail_J(T_TypeTag).==(null))
        false
      else
        MBList_J.this.containsTail_J(T_TypeTag, list.tail_J(T_TypeTag), e);
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[Tsp], or: Int): Int = MBList_J.this.tailHash_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag, list, or);
    final private[this] def tailHash_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[Tsp], or: Int): Int = {
      val headhash: Int = MiniboxDispatch.this.mboxed_hashCode(list.head_J(T_TypeTag), T_TypeTag);
      if (list.tail_J(T_TypeTag).==(null))
        headhash.|(or)
      else
        MBList_J.this.tailHash_J(T_TypeTag, list.tail_J(T_TypeTag), or.|(headhash.>>(8)))
    };
    override def hashCode(): Int = MBList_J.this.hashCode_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    override def hashCode_J(T_TypeTag: Byte): Int = MBList_J.this.tailHash_J(T_TypeTag, MBList_J.this, 0);
    override def toString(): String = MBList_J.this.toString_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    override def toString_J(T_TypeTag: Byte): String = MiniboxDispatch.this.mboxed_toString(MBList_J.this.head_J(T_TypeTag), T_TypeTag).+(if (MBList_J.this.tail_J(T_TypeTag).!=(null))
      ", ".+(MBList_J.this.tail_J(T_TypeTag).toString_J(T_TypeTag))
    else
      "");
    <paramaccessor> private[this] val head: Long = _;
    <paramaccessor> private[this] val miniboxing$benchmarks$minibox$MBList_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val tail: miniboxing.benchmarks.minibox.MBList[Tsp] = _;
    <stable> <accessor> <paramaccessor> def head(): Tsp = MiniboxConversions.this.minibox2box[Tsp](MBList_J.this.head_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag), MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    <stable> <accessor> <paramaccessor> def head_J(T_TypeTag: Byte): Long = MBList_J.this.head;
    <stable> <accessor> <paramaccessor> def tail(): miniboxing.benchmarks.minibox.MBList[Tsp] = MBList_J.this.tail_J(MBList_J.this.miniboxing$benchmarks$minibox$MBList_J|T_TypeTag);
    <stable> <accessor> <paramaccessor> def tail_J(T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[Tsp] = MBList_J.this.tail
  };
  class MBList_L[Tsp >: Nothing <: Any] extends Object with miniboxing.benchmarks.minibox.MBList[Tsp] {
    def <init>(head: Tsp, tail: miniboxing.benchmarks.minibox.MBList[Tsp]): miniboxing.benchmarks.minibox.MBList_L[Tsp] = {
      MBList_L.super.<init>();
      ()
    };
    def contains(e: Tsp): Boolean = MBList_L.this.containsTail(MBList_L.this, e);
    def contains_J(T_TypeTag: Byte, e: Long): Boolean = MBList_L.this.contains(MiniboxConversions.this.minibox2box[Tsp](e, T_TypeTag));
    def length(): Int = 1.+(if (MBList_L.this.tail().!=(null))
      MBList_L.this.tail().length()
    else
      0);
    def length_J(T_TypeTag: Byte): Int = MBList_L.this.length();
    def toString2(): String = MBList_L.this.toString();
    def toString2_J(T_TypeTag: Byte): String = MBList_L.this.toString2();
    final private[this] def containsTail(list: miniboxing.benchmarks.minibox.MBList[Tsp], e: Tsp): Boolean = if (list.head().==(e))
      true
    else
      if (list.tail().==(null))
        false
      else
        MBList_L.this.containsTail(list.tail(), e);
    final private[this] def containsTail_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[Tsp], e: Long): Boolean = MBList_L.this.containsTail(list, MiniboxConversions.this.minibox2box[Tsp](e, T_TypeTag));
    final private[this] def tailHash(list: miniboxing.benchmarks.minibox.MBList[Tsp], or: Int): Int = {
      val headhash: Int = list.head().hashCode();
      if (list.tail().==(null))
        headhash.|(or)
      else
        MBList_L.this.tailHash(list.tail(), or.|(headhash.>>(8)))
    };
    final private[this] def tailHash_J(T_TypeTag: Byte, list: miniboxing.benchmarks.minibox.MBList[Tsp], or: Int): Int = MBList_L.this.tailHash(list, or);
    override def hashCode(): Int = MBList_L.this.tailHash(MBList_L.this, 0);
    override def hashCode_J(T_TypeTag: Byte): Int = MBList_L.this.hashCode();
    override def toString(): String = MBList_L.this.head().toString().+(if (MBList_L.this.tail().!=(null))
      ", ".+(MBList_L.this.tail().toString())
    else
      "");
    override def toString_J(T_TypeTag: Byte): String = MBList_L.this.toString();
    <paramaccessor> private[this] val head: Tsp = _;
    <paramaccessor> private[this] val tail: miniboxing.benchmarks.minibox.MBList[Tsp] = _;
    <stable> <accessor> <paramaccessor> def head(): Tsp = MBList_L.this.head;
    <stable> <accessor> <paramaccessor> def head_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](MBList_L.this.head(), T_TypeTag);
    <stable> <accessor> <paramaccessor> def tail(): miniboxing.benchmarks.minibox.MBList[Tsp] = MBList_L.this.tail;
    <stable> <accessor> <paramaccessor> def tail_J(T_TypeTag: Byte): miniboxing.benchmarks.minibox.MBList[Tsp] = MBList_L.this.tail()
  }
}

[Now checking: minibox]