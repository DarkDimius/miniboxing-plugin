Specializing class SpCls7...

  // interface:
  abstract trait SpCls7[S] extends Object {
    def normalizeMe[T](s: S,t: T): S
    def normalizeMe_J[T](val S_TypeTag: Byte,s: Long,t: T): Long
    def normalizeMe_J_n_J[T](val T_TypeTag: Byte,val S_TypeTag: Byte,s: Long,t: Long): Long
    def normalizeMe_n_J[T](val T_TypeTag: Byte,s: S,t: Long): S
  }

  // specialized class:
  class SpCls7_J[Ssp] extends SpCls7[Ssp] {
    def <init>(val miniboxing$tests$correctness$SpCls7_J|S_TypeTag: Byte): miniboxing.tests.correctness.SpCls7_J[Ssp] // is a specialized implementation of constructor SpCls7
    def normalizeMe[T](s: Ssp,t: T): Ssp                                   // is a forwarder to method normalizeMe_J
    def normalizeMe_J[T](val S_TypeTag: Byte,s: Long,t: T): Long           // is a specialized implementation of method normalizeMe
    def normalizeMe_J_n_J[T](val T_TypeTag: Byte,val S_TypeTag: Byte,s: Long,t: Long): Long // is a specialized implementation of method normalizeMe
    def normalizeMe_n_J[T](val T_TypeTag: Byte,s: Ssp,t: Long): Ssp        // is a forwarder to method normalizeMe_J_n_J
    private[this] val miniboxing$tests$correctness$SpCls7_J|S_TypeTag: Byte // no info
  }

  // specialized class:
  class SpCls7_L[Ssp] extends SpCls7[Ssp] {
    def <init>(): miniboxing.tests.correctness.SpCls7_L[Ssp]               // is a specialized implementation of constructor SpCls7
    def normalizeMe[T](s: Ssp,t: T): Ssp                                   // is a specialized implementation of method normalizeMe
    def normalizeMe_J[T](val S_TypeTag: Byte,s: Long,t: T): Long           // is a forwarder to method normalizeMe
    def normalizeMe_J_n_J[T](val T_TypeTag: Byte,val S_TypeTag: Byte,s: Long,t: Long): Long // is a forwarder to method normalizeMe_n_J
    def normalizeMe_n_J[T](val T_TypeTag: Byte,s: Ssp,t: Long): Ssp        // is a specialized implementation of method normalizeMe
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.correctness {
  object SpCls7Obj extends Object {
    def <init>(): miniboxing.tests.correctness.SpCls7Obj.type = {
      SpCls7Obj.super.<init>();
      ()
    };
    def normalized[@miniboxed U >: Nothing <: Any, @miniboxed V >: Nothing <: Any](u: U, v: V): U = scala.this.Predef.???();
    def normalized_n_JJ[U >: Nothing <: Any, V >: Nothing <: Any](U_TypeTag: Byte, V_TypeTag: Byte, u: Long, v: Long): Long = MiniboxConversions.this.box2minibox_tt[Nothing](scala.this.Predef.???(), 9);
    def normalized_n_JL[U >: Nothing <: Any, V >: Nothing <: Any](U_TypeTag: Byte, u: Long, v: V): Long = MiniboxConversions.this.box2minibox_tt[Nothing](scala.this.Predef.???(), 9);
    def normalized_n_LJ[U >: Nothing <: Any, V >: Nothing <: Any](V_TypeTag: Byte, u: U, v: Long): U = scala.this.Predef.???()
  };
  abstract trait SpCls7[@miniboxed S >: Nothing <: Any] extends Object {
    def normalizeMe[@miniboxed T >: Nothing <: Any](s: S, t: T): S;
    def normalizeMe_J[@miniboxed T >: Nothing <: Any](S_TypeTag: Byte, s: Long, t: T): Long;
    def normalizeMe_J_n_J[T >: Nothing <: Any](T_TypeTag: Byte, S_TypeTag: Byte, s: Long, t: Long): Long;
    def normalizeMe_n_J[T >: Nothing <: Any](T_TypeTag: Byte, s: S, t: Long): S
  };
  class SpCls7_J[Ssp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls7[Ssp] {
    def <init>(miniboxing$tests$correctness$SpCls7_J|S_TypeTag: Byte): miniboxing.tests.correctness.SpCls7_J[Ssp] = {
      SpCls7_J.super.<init>();
      ()
    };
    def normalizeMe[@miniboxed T >: Nothing <: Any](s: Ssp, t: T): Ssp = MiniboxConversions.this.minibox2box[Ssp](SpCls7_J.this.normalizeMe_J[T](SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag, MiniboxConversions.this.box2minibox_tt[Ssp](s, SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag), t), SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag);
    def normalizeMe_J[@miniboxed T >: Nothing <: Any](S_TypeTag: Byte, s: Long, t: T): Long = SpCls7Obj.normalized_n_JL[Ssp, T](S_TypeTag, s, t);
    def normalizeMe_J_n_J[T >: Nothing <: Any](T_TypeTag: Byte, S_TypeTag: Byte, s: Long, t: Long): Long = SpCls7Obj.normalized_n_JJ[Ssp, T](S_TypeTag, T_TypeTag, s, t);
    def normalizeMe_n_J[T >: Nothing <: Any](T_TypeTag: Byte, s: Ssp, t: Long): Ssp = MiniboxConversions.this.minibox2box[Ssp](SpCls7_J.this.normalizeMe_J_n_J[T](T_TypeTag, SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag, MiniboxConversions.this.box2minibox_tt[Ssp](s, SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag), t), SpCls7_J.this.miniboxing$tests$correctness$SpCls7_J|S_TypeTag);
    <paramaccessor> private[this] val miniboxing$tests$correctness$SpCls7_J|S_TypeTag: Byte = _
  };
  class SpCls7_L[Ssp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls7[Ssp] {
    def <init>(): miniboxing.tests.correctness.SpCls7_L[Ssp] = {
      SpCls7_L.super.<init>();
      ()
    };
    def normalizeMe[@miniboxed T >: Nothing <: Any](s: Ssp, t: T): Ssp = SpCls7Obj.normalized[Ssp, T](s, t);
    def normalizeMe_J[@miniboxed T >: Nothing <: Any](S_TypeTag: Byte, s: Long, t: T): Long = MiniboxConversions.this.box2minibox_tt[Ssp](SpCls7_L.this.normalizeMe[T](MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag), t), S_TypeTag);
    def normalizeMe_J_n_J[T >: Nothing <: Any](T_TypeTag: Byte, S_TypeTag: Byte, s: Long, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Ssp](SpCls7_L.this.normalizeMe_n_J[T](T_TypeTag, MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag), t), S_TypeTag);
    def normalizeMe_n_J[T >: Nothing <: Any](T_TypeTag: Byte, s: Ssp, t: Long): Ssp = SpCls7Obj.normalized_n_LJ[Ssp, T](T_TypeTag, s, t)
  }
}

[Now checking: minibox]