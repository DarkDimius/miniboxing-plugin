[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait VerifyArrayOps[@miniboxed T >: Nothing <: Any] extends Object {
    <stable> <accessor> def x(): Array[T];
    def reverse(): Unit;
    def reverse_J(T_TypeTag: Byte): Unit;
    <stable> <accessor> def x_J(T_TypeTag: Byte): Array[T]
  };
  class VerifyArrayOps_J[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.VerifyArrayOps[Tsp] {
    def <init>(miniboxing$tests$compile$VerifyArrayOps_J|T_TypeTag: Byte, evidence$1: scala.reflect.Manifest[Tsp]): miniboxing.tests.compile.VerifyArrayOps_J[Tsp] = {
      VerifyArrayOps_J.super.<init>();
      ()
    };
    def reverse(): Unit = VerifyArrayOps_J.this.reverse_J(VerifyArrayOps_J.this.miniboxing$tests$compile$VerifyArrayOps_J|T_TypeTag);
    def reverse_J(T_TypeTag: Byte): Unit = {
      var i: Int = 0;
      var j: Int = MiniboxArray.this.mbarray_length(VerifyArrayOps_J.this.x(), T_TypeTag).-(1);
      while$1(){
        if (i.<(j))
          {
            {
              val t1: Long = MiniboxArray.this.mbarray_apply_minibox(VerifyArrayOps_J.this.x(), i, T_TypeTag);
              val t2: Long = MiniboxArray.this.mbarray_apply_minibox(VerifyArrayOps_J.this.x(), j, T_TypeTag);
              MiniboxArray.this.mbarray_update_minibox(VerifyArrayOps_J.this.x(), i, t2, T_TypeTag);
              MiniboxArray.this.mbarray_update_minibox(VerifyArrayOps_J.this.x(), j, t1, T_TypeTag);
              i = i.+(1);
              j = j.-(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.Manifest[Tsp] = _;
    <paramaccessor> private[this] val miniboxing$tests$compile$VerifyArrayOps_J|T_TypeTag: Byte = _;
    private[this] val x: Array[Tsp] = MiniboxArray.this.mbarray_new[Tsp](10, VerifyArrayOps_J.this.miniboxing$tests$compile$VerifyArrayOps_J|T_TypeTag);
    <stable> <accessor> def x(): Array[Tsp] = VerifyArrayOps_J.this.x_J(VerifyArrayOps_J.this.miniboxing$tests$compile$VerifyArrayOps_J|T_TypeTag);
    <stable> <accessor> def x_J(T_TypeTag: Byte): Array[Tsp] = VerifyArrayOps_J.this.x
  };
  class VerifyArrayOps_L[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.VerifyArrayOps[Tsp] {
    def <init>(evidence$1: scala.reflect.Manifest[Tsp]): miniboxing.tests.compile.VerifyArrayOps_L[Tsp] = {
      VerifyArrayOps_L.super.<init>();
      ()
    };
    def reverse(): Unit = {
      var i: Int = 0;
      var j: Int = VerifyArrayOps_L.this.x().length().-(1);
      while$1(){
        if (i.<(j))
          {
            {
              val t1: Tsp = VerifyArrayOps_L.this.x().apply(i);
              val t2: Tsp = VerifyArrayOps_L.this.x().apply(j);
              VerifyArrayOps_L.this.x().update(i, t2);
              VerifyArrayOps_L.this.x().update(j, t1);
              i = i.+(1);
              j = j.-(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    def reverse_J(T_TypeTag: Byte): Unit = VerifyArrayOps_L.this.reverse();
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.Manifest[Tsp] = _;
    private[this] val x: Array[Tsp] = VerifyArrayOps_L.this.evidence$1.newArray(10);
    <stable> <accessor> def x(): Array[Tsp] = VerifyArrayOps_L.this.x;
    <stable> <accessor> def x_J(T_TypeTag: Byte): Array[Tsp] = VerifyArrayOps_L.this.x()
  }
}

[Now checking: minibox]