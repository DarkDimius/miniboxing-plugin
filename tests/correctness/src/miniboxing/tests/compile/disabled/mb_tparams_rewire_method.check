Specializing class TR3...

  // interface:
  abstract trait TR3[T, Z] extends Object {
    def bar[X, Y](t: miniboxing.tests.compile.TR3[T,Z],x: X,y: Y): T
    def bar_J[X, Y](val T_TypeTag: Byte,t: miniboxing.tests.compile.TR3[T,Z],x: X,y: Y): Long
    def foo[X, Y](t: T,x: X,y: Y): T
    def foo_J[X, Y](val T_TypeTag: Byte,t: Long,x: X,y: Y): Long
  }

  // specialized class:
  class TR3_J[Tsp, Zsp] extends TR3[Tsp,Zsp] {
    def <init>(val miniboxing$tests$compile$TR3_J|T_TypeTag: Byte): miniboxing.tests.compile.TR3_J[Tsp,Zsp] // is a specialized implementation of constructor TR3
    def bar[X, Y](t: miniboxing.tests.compile.TR3[Tsp,Zsp],x: X,y: Y): Tsp // is a forwarder to method bar_J
    def bar_J[X, Y](val T_TypeTag: Byte,t: miniboxing.tests.compile.TR3[Tsp,Zsp],x: X,y: Y): Long // is a specialized implementation of method bar
    def foo[X, Y](t: Tsp,x: X,y: Y): Tsp                                   // is a forwarder to method foo_J
    def foo_J[X, Y](val T_TypeTag: Byte,t: Long,x: X,y: Y): Long           // is a specialized implementation of method foo
    private[this] val miniboxing$tests$compile$TR3_J|T_TypeTag: Byte       // no info
  }

  // specialized class:
  class TR3_L[Tsp, Zsp] extends TR3[Tsp,Zsp] {
    def <init>(): miniboxing.tests.compile.TR3_L[Tsp,Zsp]                  // is a specialized implementation of constructor TR3
    def bar[X, Y](t: miniboxing.tests.compile.TR3[Tsp,Zsp],x: X,y: Y): Tsp // is a specialized implementation of method bar
    def bar_J[X, Y](val T_TypeTag: Byte,t: miniboxing.tests.compile.TR3[Tsp,Zsp],x: X,y: Y): Long // is a forwarder to method bar
    def foo[X, Y](t: Tsp,x: X,y: Y): Tsp                                   // is a specialized implementation of method foo
    def foo_J[X, Y](val T_TypeTag: Byte,t: Long,x: X,y: Y): Long           // is a forwarder to method foo
  }




Specializing class RT3...

  // interface:
  abstract trait RT3[U, G] extends Object {
    def test(u: U): U
    def test_J(val U_TypeTag: Byte,u: Long): Long
  }

  // specialized class:
  class RT3_J[Usp, Gsp] extends RT3[Usp,Gsp] {
    def <init>(val miniboxing$tests$compile$RT3_J|U_TypeTag: Byte,g: Gsp): miniboxing.tests.compile.RT3_J[Usp,Gsp] // is a specialized implementation of constructor RT3
    def test(u: Usp): Usp                                                  // is a forwarder to method test_J
    def test_J(val U_TypeTag: Byte,u: Long): Long                          // is a specialized implementation of method test
    private[this] val g: Gsp                                               // is a specialized implementation of value g
    private[this] val miniboxing$tests$compile$RT3_J|U_TypeTag: Byte       // no info
  }

  // specialized class:
  class RT3_L[Usp, Gsp] extends RT3[Usp,Gsp] {
    def <init>(g: Gsp): miniboxing.tests.compile.RT3_L[Usp,Gsp]            // is a specialized implementation of constructor RT3
    def test(u: Usp): Usp                                                  // is a specialized implementation of method test
    def test_J(val U_TypeTag: Byte,u: Long): Long                          // is a forwarder to method test
    private[this] val g: Gsp                                               // is a specialized implementation of value g
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait TR3[@miniboxed T >: Nothing <: Any, Z >: Nothing <: Any] extends Object {
    def foo[X >: Nothing <: Any, Y >: Nothing <: Any](t: T, x: X, y: Y): T;
    def bar[X >: Nothing <: Any, Y >: Nothing <: Any](t: miniboxing.tests.compile.TR3[T,Z], x: X, y: Y): T;
    def bar_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: miniboxing.tests.compile.TR3[T,Z], x: X, y: Y): Long;
    def foo_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: Long, x: X, y: Y): Long
  };
  abstract trait RT3[@miniboxed U >: Nothing <: Any, G >: Nothing <: Any] extends Object {
    def test(u: U): U;
    def test_J(U_TypeTag: Byte, u: Long): Long
  };
  object Test3 extends Object {
    def <init>(): miniboxing.tests.compile.Test3.type = {
      Test3.super.<init>();
      ()
    };
    def test[T >: Nothing <: Any, A >: Nothing <: Any](a: A): T = {
      MiniboxConversions.this.minibox2box[Int](new miniboxing.tests.compile.TR3_J[Int,String](5).foo_J[A, A](5, MiniboxConversions.this.box2minibox_tt[Int(3)](3, 5), a, a), 5);
      new miniboxing.tests.compile.TR3_L[String,Int]().foo[A, Int]("xxx", a, 4);
      new miniboxing.tests.compile.TR3_L[T,Long]().foo[Int, Any](scala.this.Predef.???(), 2, 3)
    }
  };
  class TR3_J[Tsp >: Nothing <: Any, Zsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.TR3[Tsp,Zsp] {
    def <init>(miniboxing$tests$compile$TR3_J|T_TypeTag: Byte): miniboxing.tests.compile.TR3_J[Tsp,Zsp] = {
      TR3_J.super.<init>();
      ()
    };
    def bar[X >: Nothing <: Any, Y >: Nothing <: Any](t: miniboxing.tests.compile.TR3[Tsp,Zsp], x: X, y: Y): Tsp = MiniboxConversions.this.minibox2box[Tsp](TR3_J.this.bar_J[X, Y](TR3_J.this.miniboxing$tests$compile$TR3_J|T_TypeTag, t, x, y), TR3_J.this.miniboxing$tests$compile$TR3_J|T_TypeTag);
    def bar_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: miniboxing.tests.compile.TR3[Tsp,Zsp], x: X, y: Y): Long = t.foo_J[X, Y](T_TypeTag, MiniboxConversions.this.box2minibox_tt[Nothing](scala.this.Predef.???(), 9), x, y);
    def foo[X >: Nothing <: Any, Y >: Nothing <: Any](t: Tsp, x: X, y: Y): Tsp = MiniboxConversions.this.minibox2box[Tsp](TR3_J.this.foo_J[X, Y](TR3_J.this.miniboxing$tests$compile$TR3_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, TR3_J.this.miniboxing$tests$compile$TR3_J|T_TypeTag), x, y), TR3_J.this.miniboxing$tests$compile$TR3_J|T_TypeTag);
    def foo_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: Long, x: X, y: Y): Long = TR3_J.this.foo_J[Y, X](T_TypeTag, t, y, x);
    <paramaccessor> private[this] val miniboxing$tests$compile$TR3_J|T_TypeTag: Byte = _
  };
  class TR3_L[Tsp >: Nothing <: Any, Zsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.TR3[Tsp,Zsp] {
    def <init>(): miniboxing.tests.compile.TR3_L[Tsp,Zsp] = {
      TR3_L.super.<init>();
      ()
    };
    def bar[X >: Nothing <: Any, Y >: Nothing <: Any](t: miniboxing.tests.compile.TR3[Tsp,Zsp], x: X, y: Y): Tsp = t.foo[X, Y](scala.this.Predef.???(), x, y);
    def bar_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: miniboxing.tests.compile.TR3[Tsp,Zsp], x: X, y: Y): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TR3_L.this.bar[X, Y](t, x, y), T_TypeTag);
    def foo[X >: Nothing <: Any, Y >: Nothing <: Any](t: Tsp, x: X, y: Y): Tsp = TR3_L.this.foo[Y, X](t, y, x);
    def foo_J[X >: Nothing <: Any, Y >: Nothing <: Any](T_TypeTag: Byte, t: Long, x: X, y: Y): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TR3_L.this.foo[X, Y](MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), x, y), T_TypeTag)
  };
  class RT3_J[Usp >: Nothing <: Any, Gsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.RT3[Usp,Gsp] {
    def <init>(miniboxing$tests$compile$RT3_J|U_TypeTag: Byte, g: Gsp): miniboxing.tests.compile.RT3_J[Usp,Gsp] = {
      RT3_J.super.<init>();
      ()
    };
    def test(u: Usp): Usp = MiniboxConversions.this.minibox2box[Usp](RT3_J.this.test_J(RT3_J.this.miniboxing$tests$compile$RT3_J|U_TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](u, RT3_J.this.miniboxing$tests$compile$RT3_J|U_TypeTag)), RT3_J.this.miniboxing$tests$compile$RT3_J|U_TypeTag);
    def test_J(U_TypeTag: Byte, u: Long): Long = {
      val tr: miniboxing.tests.compile.TR3[Usp,Int] = new miniboxing.tests.compile.TR3_J[Usp,Int](U_TypeTag);
      tr.foo_J[Gsp, Any](U_TypeTag, u, RT3_J.this.g, RT3_J.this.g)
    };
    <paramaccessor> private[this] val g: Gsp = _;
    <paramaccessor> private[this] val miniboxing$tests$compile$RT3_J|U_TypeTag: Byte = _
  };
  class RT3_L[Usp >: Nothing <: Any, Gsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.RT3[Usp,Gsp] {
    def <init>(g: Gsp): miniboxing.tests.compile.RT3_L[Usp,Gsp] = {
      RT3_L.super.<init>();
      ()
    };
    def test(u: Usp): Usp = {
      val tr: miniboxing.tests.compile.TR3[Usp,Int] = new miniboxing.tests.compile.TR3_L[Usp,Int]();
      tr.foo[Gsp, Any](u, RT3_L.this.g, RT3_L.this.g)
    };
    def test_J(U_TypeTag: Byte, u: Long): Long = MiniboxConversions.this.box2minibox_tt[Usp](RT3_L.this.test(MiniboxConversions.this.minibox2box[Usp](u, U_TypeTag)), U_TypeTag);
    <paramaccessor> private[this] val g: Gsp = _
  }
}

[Now checking: minibox]