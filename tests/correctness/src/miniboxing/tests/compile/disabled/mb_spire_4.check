Specializing trait Dist...

  // interface:
  abstract trait Dist[A] extends Object {
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: A,implicit cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
    def sample_J[CC[A] <: Iterable[A]](val A_TypeTag: Byte,n: Int,implicit a: Long,implicit cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
  }

  // specialized class:
  abstract trait Dist_J[Asp] extends Dist[Asp] {
    def miniboxing$tests$compile$Dist_J|A_TypeTag(): Byte                  // is a type tag
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: Asp,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a forwarder to method sample_J
    def sample_J[CC[A] <: Iterable[A]](val A_TypeTag: Byte,n: Int,implicit a: Long,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a specialized implementation of method sample
  }

  // specialized class:
  abstract trait Dist_L[Asp] extends Dist[Asp] {
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: Asp,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a specialized implementation of method sample
    def sample_J[CC[A] <: Iterable[A]](val A_TypeTag: Byte,n: Int,implicit a: Long,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a forwarder to method sample
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Dist[@miniboxed A >: Nothing <: Any] extends Object { self: miniboxing.tests.compile.Dist[A] =>
    def sample[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: A, cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A];
    def sample_J[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
  };
  abstract trait Dist_J[Asp >: Nothing <: Any] extends Object with miniboxing.tests.compile.Dist[Asp] {
    def miniboxing$tests$compile$Dist_J|A_TypeTag(): Byte;
    def sample[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = Dist_J.this.sample_J[CC](Dist_J.this.miniboxing$tests$compile$Dist_J|A_TypeTag(), n, MiniboxConversions.this.box2minibox_tt[Asp](a, Dist_J.this.miniboxing$tests$compile$Dist_J|A_TypeTag()), cbf);
    def sample_J[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = cbf.apply().result()
  };
  abstract trait Dist_L[Asp >: Nothing <: Any] extends Object with miniboxing.tests.compile.Dist[Asp] {
    def sample[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = cbf.apply().result();
    def sample_J[CC[A >: Nothing <: Any] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = Dist_L.this.sample[CC](n, MiniboxConversions.this.minibox2box[Asp](a, A_TypeTag), cbf)
  }
}