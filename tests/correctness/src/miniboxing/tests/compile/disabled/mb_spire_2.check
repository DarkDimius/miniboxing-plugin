Specializing class Complex...

  // interface:
  case abstract trait Complex[T] extends Product with Serializable {
    def canEqual(x$1: Any): Boolean
    def copy$default$1[T](): T @scala.annotation.unchecked.uncheckedVariance
    def copy$default$2[T](): T @scala.annotation.unchecked.uncheckedVariance
    def copy[T](t1: T,t2: T): miniboxing.tests.compile.Complex[T]
    def productArity(): Int
    def productElement(x$1: Int): Any
    override def equals(x$1: Any): Boolean
    override def hashCode(): Int
    override def productIterator(): Iterator[Any]
    override def productPrefix(): String
    override def toString(): String
    val t1(): T
    val t1_J(val T_TypeTag: Byte): Long
    val t2(): T
    val t2_J(val T_TypeTag: Byte): Long
  }

  // specialized class:
  case class Complex_J[Tsp] extends Product with Serializable with Complex[Tsp] {
    def <init>(val miniboxing$tests$compile$Complex_J|T_TypeTag: Byte,t1: Long,t2: Long): miniboxing.tests.compile.Complex_J[Tsp] // is a specialized implementation of constructor Complex
    private[this] val miniboxing$tests$compile$Complex_J|T_TypeTag: Byte   // no info
    private[this] val t1: Long                                             // is a specialized implementation of value t1
    private[this] val t2: Long                                             // is a specialized implementation of value t2
    val t1(): Tsp                                                          // is a forwarder to value t1_J
    val t1_J(val T_TypeTag: Byte): Long                                    // is a setter or getter for value t1
    val t2(): Tsp                                                          // is a forwarder to value t2_J
    val t2_J(val T_TypeTag: Byte): Long                                    // is a setter or getter for value t2
  }

  // specialized class:
  case class Complex_L[Tsp] extends Product with Serializable with Complex[Tsp] {
    def <init>(t1: Tsp,t2: Tsp): miniboxing.tests.compile.Complex_L[Tsp]   // is a specialized implementation of constructor Complex
    private[this] val t1: Tsp                                              // is a specialized implementation of value t1
    private[this] val t2: Tsp                                              // is a specialized implementation of value t2
    val t1(): Tsp                                                          // is a setter or getter for value t1
    val t1_J(val T_TypeTag: Byte): Long                                    // is a forwarder to value t1
    val t2(): Tsp                                                          // is a setter or getter for value t2
    val t2_J(val T_TypeTag: Byte): Long                                    // is a forwarder to value t2
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Complex[@miniboxed T >: Nothing <: Any] extends Object with Product with Serializable {
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1(): T;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2(): T;
    <synthetic> def copy[@miniboxed T >: Nothing <: Any](t1: T, t2: T): miniboxing.tests.compile.Complex[T] = new miniboxing.tests.compile.Complex_L[T](t1, t2);
    <synthetic> def copy$default$1[@miniboxed T >: Nothing <: Any](): T @scala.annotation.unchecked.uncheckedVariance = Complex.this.t1();
    <synthetic> def copy$default$2[@miniboxed T >: Nothing <: Any](): T @scala.annotation.unchecked.uncheckedVariance = Complex.this.t2();
    override <synthetic> def productPrefix(): String = "Complex";
    <synthetic> def productArity(): Int = 2;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      x1 match {
        case 0 => Complex.this.t1()
        case 1 => Complex.this.t2()
        case _ => throw new IndexOutOfBoundsException(x$1.toString())
      }
    };
    override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Complex.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[miniboxing.tests.compile.Complex[_]]();
    override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Complex.this);
    override <synthetic> def toString(): String = ScalaRunTime.this._toString(Complex.this);
    override <synthetic> def equals(x$1: Any): Boolean = Complex.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[miniboxing.tests.compile.Complex[T]]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
      <synthetic> val Complex$1: miniboxing.tests.compile.Complex[T] = x$1.asInstanceOf[miniboxing.tests.compile.Complex[T]]();
      Complex.this.t1().==(Complex$1.t1()).&&(Complex.this.t2().==(Complex$1.t2())).&&(Complex$1.canEqual(Complex.this))
    }));
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1_J(T_TypeTag: Byte): Long;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2_J(T_TypeTag: Byte): Long
  };
  <synthetic> object Complex extends Object with Serializable {
    def <init>(): miniboxing.tests.compile.Complex.type = {
      Complex.super.<init>();
      ()
    };
    final override <synthetic> def toString(): String = "Complex";
    case <synthetic> def apply[@miniboxed T >: Nothing <: Any](t1: T, t2: T): miniboxing.tests.compile.Complex[T] = new miniboxing.tests.compile.Complex_L[T](t1, t2);
    case <synthetic> def unapply[@miniboxed T >: Nothing <: Any](x$0: miniboxing.tests.compile.Complex[T]): Option[(T, T)] = if (x$0.==(null))
      scala.this.None
    else
      new Some[(T, T)](new (T, T)(x$0.t1(), x$0.t2()));
    <synthetic> private def readResolve(): Object = compile.this.Complex
  };
  case class Complex_J[Tsp >: Nothing <: Any] extends Object with Product with Serializable with miniboxing.tests.compile.Complex[Tsp] {
    def <init>(miniboxing$tests$compile$Complex_J|T_TypeTag: Byte, t1: Long, t2: Long): miniboxing.tests.compile.Complex_J[Tsp] = {
      Complex_J.super.<init>();
      ()
    };
    <paramaccessor> private[this] val miniboxing$tests$compile$Complex_J|T_TypeTag: Byte = _;
    <caseaccessor> <paramaccessor> private[this] val t1: Long = _;
    <caseaccessor> <paramaccessor> private[this] val t2: Long = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1(): Tsp = MiniboxConversions.this.minibox2box[Tsp](Complex_J.this.t1_J(Complex_J.this.miniboxing$tests$compile$Complex_J|T_TypeTag), Complex_J.this.miniboxing$tests$compile$Complex_J|T_TypeTag);
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1_J(T_TypeTag: Byte): Long = Complex_J.this.t1;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2(): Tsp = MiniboxConversions.this.minibox2box[Tsp](Complex_J.this.t2_J(Complex_J.this.miniboxing$tests$compile$Complex_J|T_TypeTag), Complex_J.this.miniboxing$tests$compile$Complex_J|T_TypeTag);
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2_J(T_TypeTag: Byte): Long = Complex_J.this.t2
  };
  case class Complex_L[Tsp >: Nothing <: Any] extends Object with Product with Serializable with miniboxing.tests.compile.Complex[Tsp] {
    def <init>(t1: Tsp, t2: Tsp): miniboxing.tests.compile.Complex_L[Tsp] = {
      Complex_L.super.<init>();
      ()
    };
    <caseaccessor> <paramaccessor> private[this] val t1: Tsp = _;
    <caseaccessor> <paramaccessor> private[this] val t2: Tsp = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1(): Tsp = Complex_L.this.t1;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t1_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Complex_L.this.t1(), T_TypeTag);
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2(): Tsp = Complex_L.this.t2;
    <stable> <caseaccessor> <accessor> <paramaccessor> def t2_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Complex_L.this.t2(), T_TypeTag)
  }
}

[Now checking: minibox]