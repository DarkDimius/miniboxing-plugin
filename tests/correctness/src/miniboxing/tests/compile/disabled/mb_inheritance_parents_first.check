Specializing class C...

  // interface:
  abstract trait C[T] extends Object {
  }

  // specialized class:
  class C_J[Tsp] extends C[Tsp] {
    def <init>(val miniboxing$tests$compile$inheritance$C_J|T_TypeTag: Byte): miniboxing.tests.compile.inheritance.C_J[Tsp] // is a specialized implementation of constructor C
    private[this] val miniboxing$tests$compile$inheritance$C_J|T_TypeTag: Byte // no info
  }

  // specialized class:
  class C_L[Tsp] extends C[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.C_L[Tsp]            // is a specialized implementation of constructor C
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait C[@miniboxed T >: Nothing <: Any] extends Object;
  class D extends miniboxing.tests.compile.inheritance.C_J[Int] {
    def <init>(): miniboxing.tests.compile.inheritance.D = {
      D.super.<init>(5);
      ()
    }
  };
  class C_J[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.inheritance.C[Tsp] {
    def <init>(miniboxing$tests$compile$inheritance$C_J|T_TypeTag: Byte): miniboxing.tests.compile.inheritance.C_J[Tsp] = {
      C_J.super.<init>();
      ()
    };
    <paramaccessor> private[this] val miniboxing$tests$compile$inheritance$C_J|T_TypeTag: Byte = _
  };
  class C_L[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.inheritance.C[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.C_L[Tsp] = {
      C_L.super.<init>();
      ()
    }
  }
}